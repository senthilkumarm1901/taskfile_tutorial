version: '3'

env:
  aws_region: ap-south-1
  ec2_key_name: 
    sh: echo "${USER}_EC2_KEY_PAIR"
  ec2_key_pair_file_name: 
    sh: echo "${USER}Ec2KeyPair.pem"
  my_ip_address:
    sh: curl -s ipinfo.io/ip
  sec_group_name:
    sh: echo "${USER}_EC2_sec_group"

tasks:

  0A.create_vpc:
    env:
      cidr_block: 10.1.0.0/16
      # assuming 10.0.0.0/16 is already taken by another VPC 
    summary: |
      Generate a new VPC in the AWS account
      A Cidr block with prefix /16 allows for 2^(32-16) allows 65536 IP addresses for the VPC
    cmds:
      - aws ec2 create-vpc --cidr-block 10.1.0.0/16 --tag-specification ResourceType=vpc,Tags=[{Key=Name,Value=EC2VPC}] > create-vpc-command-output.json
      - sleep 10 # to wait creation of VPC
      - aws ec2 describe-vpcs > command_outputs/describe_vpcs.json
    
  0B.create_public_subnet: 
    summary: |
      Create a subnet within the vpc
      A Cidr block with prefix /24 allows for 2^(32-24) = 256 IP addresses for the subnet
    env: 
      vpc_id:
        sh: echo $(jp -f command_outputs/describe_vpcs.json -u 'join(`","`,Vpcs[?Tags[?Value==`"EC2VPC"`]].VpcId)')
      public_subnet_name: PublicSubnet
    cmds: 
      - aws ec2 create-subnet --vpc-id $vpc_id --cidr-block 10.1.0.0/24 --tag-specifications "ResourceType=subnet, Tags=[{Key=Name,Value=$public_subnet_name}]" > command_outputs/create-public-subnet1-output.json
  
  0C.create_public_route_table_for_public_subnet:
    env: 
      vpc_id:
        sh: echo $(jp -f command_outputs/describe_vpcs.json -u 'join(`","`,Vpcs[?Tags[?Value==`"EC2VPC"`]].VpcId)')
    summary: | 
      A route table contains a set of rules, called routes, that are used to determine where network traffic from your subnet or gateway is directed.
    cmds:
      - aws ec2 create-route-table --vpc-id $vpc_id > command_outputs/route-table-public-subnet-op.json

  0D.create_int_gw:
    summary: |
      An internet gateway is a virtual router that connects a VPC to the internet
    env: 
      vpc_id:
        sh: echo $(jp -f command_outputs/describe_vpcs.json -u 'join(`","`,Vpcs[?Tags[?Value==`"EC2VPC"`]].VpcId)')
    cmds:
      - aws ec2 create-internet-gateway > command_outputs/create-ig.json

  0E.attach_int_gw_to_vpc:
    env: 
      vpc_id:
        sh: echo $(jp -f command_outputs/describe_vpcs.json -u 'join(`","`,Vpcs[?Tags[?Value==`"EC2VPC"`]].VpcId)')
      ig_id:
        sh: echo $(cat command_outputs/create-ig.json | jp -u 'InternetGateway.InternetGatewayId')
    cmds:
      - aws ec2 attach-internet-gateway --internet-gateway-id $ig_id --vpc-id $vpc_id
  
  0F.create_route_and_associate_public_subnet_in_route_table:
    env:
      vpc_id:
        sh: echo $(jp -f command_outputs/describe_vpcs.json -u 'join(`","`,Vpcs[?Tags[?Value==`"EC2VPC"`]].VpcId)')
      public_sub_route_table_id:
        sh: echo $(cat command_outputs/route-table-public-subnet-op.json | jp -u 'RouteTable.RouteTableId')
      ig_id:
        sh: echo $(cat command_outputs/create-ig.json | jp -u 'InternetGateway.InternetGatewayId')
      public_subnet_id:
        sh: echo $(cat command_outputs/create-public-subnet1-output.json | jp -u 'Subnet.SubnetId')  
    cmds:
      - aws ec2 create-route --route-table-id $public_sub_route_table_id --destination-cidr-block 0.0.0.0/0 --gateway-id $ig_id > command_outputs/create-public-route.json
      - aws ec2 associate-route-table --subnet-id $public_subnet_id --route-table-id $public_sub_route_table_id > command_outputs/associate-public-route-table.json

  1A.generate_ec2_key_pair:
    summary: |
      Generates a new EC2 key pair using AWS CLI, saves the private key to a file, and sets appropriate permissions.
    cmds:
      - aws ec2 create-key-pair --key-name $ec2_key_name --query 'KeyMaterial' --output text > $ec2_key_pair_file_name
      - chmod 400 $ec2_key_pair_file_name
    silent: false
  
  1B.use_created_ec2_key_pair:
    summary: |
      Retrieves information about the previously created EC2 key pair.
    cmds:
      - aws ec2 describe-key-pairs --key-name $ec2_key_name
    silent: false

  2.create_sec_group_for_ec2:
    env: 
      vpc_id: 
        sh: echo $(jp -f command_outputs/describe_vpcs.json -u 'join(`","`,Vpcs[?Tags[?Value==`"EC2VPC"`]].VpcId)')
    summary: |
      Creates an EC2 security group within the specified VPC, obtaining the VPC ID from the .env file.
    cmds:
      - aws ec2 create-security-group --vpc-id $vpc_id --group-name $sec_group_name --description "EC2 instance sec group" > create-security-group.json
    silent: false
  
  3A.allow_ssh_port_access_in_sg:
    summary: |
      Authorizes inbound SSH traffic to the EC2 security group for the current user's IP address.
    env:
      sec_group_id:
        sh: cat create-security-group.json | jp -u 'GroupId'
    cmds:
      - aws ec2 authorize-security-group-ingress --group-id $sec_group_id --protocol tcp --port 22 --cidr ${my_ip_address}/32 --output text
      - # if you are planning to expose http port 80
      - # aws ec2 authorize-security-group-ingress --group-id $sec_group_id --protocol tcp --port 80 --cidr ${my_ip_address}/32 --output text
    silent: false
  
  3B.allow_public_subnet_to_auto_assign_ipv4_address:
    summary: |
      Modifies the specified public subnet to automatically assign IPv4 addresses to instances launched in it.
    cmds:
      - aws ec2 modify-subnet-attribute --subnet-id $public_subnet_id --map-public-ip-on-launch
    silent: false

  optional_fetch_ami_instances:
    summary: |
      Fetches information about available Amazon Machine Images (AMIs) and EC2 instance types.
    cmds:
      - aws ec2 describe-images --owners self amazon > amis_in_this_region.json
      - aws ec2 describe-instance-types --output json > instance-types.json
    silent: false

  4.create_ec2_instance:
    summary: |
      Launches a new EC2 instance with a specified AMI, instance type, security group, and subnet.
    env:
      AMI_ID: ami-0ecbbce1ad787aa0a
      INSTANCE_TYPE: g4dn.xlarge
      sec_group_id:
        sh: cat create-security-group.json | jp -u 'GroupId'
    cmds:
      - aws ec2 run-instances --image-id $AMI_ID --count 1 --instance-type $INSTANCE_TYPE --security-group-ids $sec_group_id --subnet-id $public_subnet_id --key-name $ec2_key_name > pytorch_ubuntu_instance.json
    silent: false
  
  5.running_ec2_instance_details:
    summary: |
      Retrieves details about the running EC2 instance, such as instance ID and public IP address.
    env:
      ec2_instance_id:
        sh: jp -f pytorch_ubuntu_instance.json -u 'Instances[0].InstanceId'
    cmds:
    - aws ec2 describe-instances --instance-ids $ec2_instance_id > describe_instances.json
    silent: false

  6.ssh_into_the_ec2_instance:
    summary: |
      Connects to the running EC2 instance using SSH with the specified private key and public IP address.
    env:
      ec2_instance_id:
        sh: jp -f pytorch_ubuntu_instance.json -u 'Instances[0].InstanceId'
      public_ip_address:
        sh: jp -f describe_instances.json -u 'Reservations[0].Instances[0].PublicIpAddress'
    cmds:
      - ssh -i $ec2_key_pair_file_name ubuntu@$public_ip_address
    silent: false

  7A.stop_ec2_instance:
    summary: |
      Stops the running EC2 instance using its instance ID.
    env: 
      ec2_instance_id:
        sh: jp -f pytorch_ubuntu_instance.json -u 'Instances[0].InstanceId'
    cmds:
     - aws ec2 stop-instances --instance-ids $ec2_instance_id
    silent: false

  7B.start_ec2_instance:
    summary: |
      Starts the stopped EC2 instance using its instance ID.
    env: 
      ec2_instance_id:
        sh: jp -f pytorch_ubuntu_instance.json -u 'Instances[0].InstanceId'
    cmds:
     - aws ec2 start-instances --instance-ids $ec2_instance_id
    silent: false     

  7C.terminate_ec2_instance:
    summary: |
      Terminates the EC2 instance using its instance ID.
    env: 
      ec2_instance_id:
        sh: jp -f pytorch_ubuntu_instance.json -u 'Instances[0].InstanceId'
    cmds:
     - aws ec2 terminate-instances --instance-ids $ec2_instance_id
    silent: false    

  8.clean_up_all:
    summary: |
      Cleans up resources by deleting the EC2 security group and modifying the public subnet attributes.
    env:
      sec_group_id:
        sh: cat create-security-group.json | jp -u 'GroupId'
      ec2_instance_id:
        sh: jp -f pytorch_ubuntu_instance.json -u 'Instances[0].InstanceId'
    cmds:
      - aws ec2 delete-security-group --group-id $sec_group_id
      - aws ec2 modify-subnet-attribute --subnet-id $public_subnet_id --no-map-public-ip-on-launch
    silent: false